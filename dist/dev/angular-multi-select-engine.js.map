{"version":3,"sources":["../../src/angular-multi-select-engine.js"],"names":[],"mappings":"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","file":"angular-multi-select-engine.js","sourcesContent":["var angular_multi_select_engine = angular.module('angular-multi-select-engine', [\n\t'angular-multi-select-utils',\n\t'angular-multi-select-constants'\n]);\n\nangular_multi_select_engine.factory('angularMultiSelectEngine', [\n\t'angularMultiSelectUtils',\n\t'angularMultiSelectConstants',\n\tfunction (angularMultiSelectUtils, angularMultiSelectConstants) {\n\t\t'use strict';\n\t\t/*\n\t\t ██████  ██████  ███    ██ ███████ ████████ ██████  ██    ██  ██████ ████████  ██████  ██████\n\t\t██      ██    ██ ████   ██ ██         ██    ██   ██ ██    ██ ██         ██    ██    ██ ██   ██\n\t\t██      ██    ██ ██ ██  ██ ███████    ██    ██████  ██    ██ ██         ██    ██    ██ ██████\n\t\t██      ██    ██ ██  ██ ██      ██    ██    ██   ██ ██    ██ ██         ██    ██    ██ ██   ██\n\t\t ██████  ██████  ██   ████ ███████    ██    ██   ██  ██████   ██████    ██     ██████  ██   ██\n\t\t*/\n\t\tvar Engine = function (ops) {\n\t\t\tthis.amsu = new angularMultiSelectUtils();\n\t\t\tObject.assign(this, this.amsu.sanitize_ops(ops));\n\n\t\t\t/*\n\t\t\t * Initiate the database and setup index fields.\n\t\t\t */\n\t\t\tthis.db = new loki();\n\n\t\t\tthis.on_data_change_fn = null;\n\t\t\tthis.on_visual_change_fn = null;\n\t\t};\n\n\t\t/*\n\t\t ██████  ███    ██     ██████   █████  ████████  █████       ██████ ██   ██  █████  ███    ██  ██████  ███████\n\t\t██    ██ ████   ██     ██   ██ ██   ██    ██    ██   ██     ██      ██   ██ ██   ██ ████   ██ ██       ██\n\t\t██    ██ ██ ██  ██     ██   ██ ███████    ██    ███████     ██      ███████ ███████ ██ ██  ██ ██   ███ █████\n\t\t██    ██ ██  ██ ██     ██   ██ ██   ██    ██    ██   ██     ██      ██   ██ ██   ██ ██  ██ ██ ██    ██ ██\n\t\t ██████  ██   ████     ██████  ██   ██    ██    ██   ██      ██████ ██   ██ ██   ██ ██   ████  ██████  ███████\n\t\t*/\n\t\tEngine.prototype.on_data_change = function (ops) {\n\t\t\t/*\n\t\t\t * Will be executed when the data in one or more of the items in the\n\t\t\t * tree are changed. Changes such as open/close (visibility related)\n\t\t\t * won't trigger this function.\n\t\t\t *\n\t\t\t * Note that this method will be ran only once after applying\n\t\t\t * multiple data updates if there are more than one, like for example\n\t\t\t * when checking a node that has multiple children.\n\t\t\t */\n\n\t\t\tvar default_ops = {\n\t\t\t\tskip_internal: false\n\t\t\t};\n\n\t\t\tops = ops || {};\n\t\t\tfor (var k in default_ops) {\n\t\t\t\tif (!ops.hasOwnProperty(k)) {\n\t\t\t\t\tops[k] = default_ops[k];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ops.skip_internal === false) {\n\t\t\t\t/*\n\t\t\t\t * Handle situation where a maximum amount of checked leafs has been specified.\n\t\t\t\t */\n\t\t\t\tif (this.MAX_CHECKED_LEAFS > -1 && this.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_LEAFS] > this.MAX_CHECKED_LEAFS) {\n\t\t\t\t\tthis.uncheck_first(this.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_LEAFS] - this.MAX_CHECKED_LEAFS);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(this.on_data_change_fn) === 'function') {\n\t\t\t\tthis.on_data_change_fn();\n\t\t\t}\n\t\t};\n\n\t\t/*\n\t\t ██████  ███    ██     ██    ██ ██ ███████ ██    ██  █████  ██           ██████ ██   ██  █████  ███    ██  ██████  ███████\n\t\t██    ██ ████   ██     ██    ██ ██ ██      ██    ██ ██   ██ ██          ██      ██   ██ ██   ██ ████   ██ ██       ██\n\t\t██    ██ ██ ██  ██     ██    ██ ██ ███████ ██    ██ ███████ ██          ██      ███████ ███████ ██ ██  ██ ██   ███ █████\n\t\t██    ██ ██  ██ ██      ██  ██  ██      ██ ██    ██ ██   ██ ██          ██      ██   ██ ██   ██ ██  ██ ██ ██    ██ ██\n\t\t ██████  ██   ████       ████   ██ ███████  ██████  ██   ██ ███████      ██████ ██   ██ ██   ██ ██   ████  ██████  ███████\n\t\t*/\n\t\tEngine.prototype.on_visual_change = function (ops) {\n\t\t\t/*\n\t\t\t* Will be executed when the tree changed somehow, visually speaking.\n\t\t\t* This function could be triggered by an open/close action for example.\n\t\t\t* Changes such as un/checking an item won't trigger this function.\n\t\t\t*\n\t\t\t* Note that this method will be ran only once, after applying all the\n\t\t\t* visual changes required by the action, like for example when closing\n\t\t\t* a node that has multiple children.\n\t\t\t*/\n\n\t\t\tvar default_ops = {\n\t\t\t\tskip_internal: false\n\t\t\t};\n\n\t\t\tops = ops || {};\n\t\t\tfor (var k in default_ops) {\n\t\t\t\tif (!ops.hasOwnProperty(k)) {\n\t\t\t\t\tops[k] = default_ops[k];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ops.skip_internal === false) {\n\t\t\t\t//Do something here?\n\t\t\t}\n\n\t\t\tif (typeof(this.on_visual_change_fn) === 'function') {\n\t\t\t\tthis.on_visual_change_fn();\n\t\t\t}\n\t\t};\n\n\t\t/*\n\t\t ██████ ██████  ███████  █████  ████████ ███████      ██████  ██████  ██      ██      ███████  ██████ ████████ ██  ██████  ███    ██\n\t\t██      ██   ██ ██      ██   ██    ██    ██          ██      ██    ██ ██      ██      ██      ██         ██    ██ ██    ██ ████   ██\n\t\t██      ██████  █████   ███████    ██    █████       ██      ██    ██ ██      ██      █████   ██         ██    ██ ██    ██ ██ ██  ██\n\t\t██      ██   ██ ██      ██   ██    ██    ██          ██      ██    ██ ██      ██      ██      ██         ██    ██ ██    ██ ██  ██ ██\n\t\t ██████ ██   ██ ███████ ██   ██    ██    ███████      ██████  ██████  ███████ ███████ ███████  ██████    ██    ██  ██████  ██   ████\n\t\t*/\n\t\tEngine.prototype.create_collection = function (name) {\n\t\t\t/*\n\t\t\t * Create a collection in the database and create indices.\n\t\t\t */\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> create_collection\");\n\n\t\t\tthis.collection = this.db.addCollection(name, {\n\t\t\t\tindices: [\n\t\t\t\t\tthis.ID_PROPERTY,\n\t\t\t\t\tthis.CHECKED_PROPERTY,\n\t\t\t\t\tangularMultiSelectConstants.INTERNAL_KEY_LEVEL,\n\t\t\t\t\tangularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID,\n\t\t\t\t\tangularMultiSelectConstants.INTERNAL_KEY_TREE_VISIBILITY\n\t\t\t\t],\n\t\t\t\tclone: true\n\t\t\t});\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> create_collection\");\n\t\t};\n\n\t\t/*\n\t\t██████  ███████ ███    ███  ██████  ██    ██ ███████      ██████  ██████  ██      ██      ███████  ██████ ████████ ██  ██████  ███    ██\n\t\t██   ██ ██      ████  ████ ██    ██ ██    ██ ██          ██      ██    ██ ██      ██      ██      ██         ██    ██ ██    ██ ████   ██\n\t\t██████  █████   ██ ████ ██ ██    ██ ██    ██ █████       ██      ██    ██ ██      ██      █████   ██         ██    ██ ██    ██ ██ ██  ██\n\t\t██   ██ ██      ██  ██  ██ ██    ██  ██  ██  ██          ██      ██    ██ ██      ██      ██      ██         ██    ██ ██    ██ ██  ██ ██\n\t\t██   ██ ███████ ██      ██  ██████    ████   ███████      ██████  ██████  ███████ ███████ ███████  ██████    ██    ██  ██████  ██   ████\n\t\t*/\n\t\tEngine.prototype.remove_collection = function (name) {\n\t\t\t/*\n\t\t\t * Remove a collection from the database.\n\t\t\t */\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> remove_collection\");\n\n\t\t\tname = name || this.NAME;\n\t\t\tthis.db.removeCollection(name);\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> remove_collection\");\n\t\t};\n\n\t\t/*\n\t\t██ ███    ██ ███████ ███████ ██████  ████████\n\t\t██ ████   ██ ██      ██      ██   ██    ██\n\t\t██ ██ ██  ██ ███████ █████   ██████     ██\n\t\t██ ██  ██ ██      ██ ██      ██   ██    ██\n\t\t██ ██   ████ ███████ ███████ ██   ██    ██\n\t\t*/\n\t\tEngine.prototype.insert = function (items) {\n\t\t\t/*\n\t\t\t * Iterate over an array of items and insert them.\n\t\t\t */\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> insert\");\n\n\t\t\tthis.remove_collection(this.NAME);\n\t\t\tthis.create_collection(this.NAME);\n\n\t\t\tthis.reset_stats();\n\n\t\t\titems = items || [];\n\n\t\t\tif (Array.isArray(items)) {\n\t\t\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\t\t\tthis.collection.insert(items[i]);\n\t\t\t\t\tthis.update_stats(items[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.collection.insert(items);\n\t\t\t\tthis.update_stats(items);\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> insert\");\n\n\t\t\tthis.on_data_change();\n\t\t};\n\n\t\t/*\n\t\t ██████  ███████ ████████     ███████ ████████  █████  ████████ ███████\n\t\t██       ██         ██        ██         ██    ██   ██    ██    ██\n\t\t██   ███ █████      ██        ███████    ██    ███████    ██    ███████\n\t\t██    ██ ██         ██             ██    ██    ██   ██    ██         ██\n\t\t ██████  ███████    ██        ███████    ██    ██   ██    ██    ███████\n\t\t*/\n\t\tEngine.prototype.get_stats = function () {\n\t\t\treturn this.stats;\n\t\t};\n\n\t\t/*\n\t\t██    ██ ██████  ██████   █████  ████████ ███████     ███████ ████████  █████  ████████ ███████\n\t\t██    ██ ██   ██ ██   ██ ██   ██    ██    ██          ██         ██    ██   ██    ██    ██\n\t\t██    ██ ██████  ██   ██ ███████    ██    █████       ███████    ██    ███████    ██    ███████\n\t\t██    ██ ██      ██   ██ ██   ██    ██    ██               ██    ██    ██   ██    ██         ██\n\t\t ██████  ██      ██████  ██   ██    ██    ███████     ███████    ██    ██   ██    ██    ███████\n\t\t*/\n\t\tEngine.prototype.update_stats = function (item) {\n\t\t\tswitch (item[this.CHECKED_PROPERTY]) {\n\t\t\t\tcase angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED:\n\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES]++;\n\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_TOTAL_NODES]++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED:\n\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES]++;\n\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_TOTAL_NODES]++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase angularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED:\n\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_TOTAL_NODES]++;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase angularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED:\n\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_LEAFS]++;\n\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_TOTAL_LEAFS]++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase angularMultiSelectConstants.INTERNAL_DATA_LEAF_UNCHECKED:\n\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_TOTAL_LEAFS]++;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t/*\n\t\t██████  ███████ ███████ ███████ ████████     ███████ ████████  █████  ████████ ███████\n\t\t██   ██ ██      ██      ██         ██        ██         ██    ██   ██    ██    ██\n\t\t██████  █████   ███████ █████      ██        ███████    ██    ███████    ██    ███████\n\t\t██   ██ ██           ██ ██         ██             ██    ██    ██   ██    ██         ██\n\t\t██   ██ ███████ ███████ ███████    ██        ███████    ██    ██   ██    ██    ███████\n\t\t*/\n\t\tEngine.prototype.reset_stats = function () {\n\t\t\tthis.stats = {\n\t\t\t\t[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_LEAFS]: 0,\n\t\t\t\t[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES]: 0,\n\t\t\t\t[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES]: 0,\n\t\t\t\t[angularMultiSelectConstants.INTERNAL_STATS_TOTAL_LEAFS]: 0,\n\t\t\t\t[angularMultiSelectConstants.INTERNAL_STATS_TOTAL_NODES]: 0\n\t\t\t};\n\t\t};\n\n\t\t/*\n\t\t ██████  ███████ ████████     ███████ ██    ██ ██      ██          ████████ ██████  ███████ ███████\n\t\t██       ██         ██        ██      ██    ██ ██      ██             ██    ██   ██ ██      ██\n\t\t██   ███ █████      ██        █████   ██    ██ ██      ██             ██    ██████  █████   █████\n\t\t██    ██ ██         ██        ██      ██    ██ ██      ██             ██    ██   ██ ██      ██\n\t\t ██████  ███████    ██        ██       ██████  ███████ ███████        ██    ██   ██ ███████ ███████\n\t\t*/\n\t\tEngine.prototype.get_full_tree = function () {\n\t\t\t/*\n\t\t\t * Get the entire set of data currently inserted in Loki.\n\t\t\t */\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> get_full_tree\");\n\n\t\t\t//TODO: Strip LokiJS metadata. https://github.com/techfort/LokiJS/issues/346\n\t\t\tvar tree = this.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({})\n\t\t\t\t.simplesort(angularMultiSelectConstants.INTERNAL_KEY_ORDER, false)\n\t\t\t\t.data();\n\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> get_full_tree\");\n\n\t\t\treturn tree;\n\t\t};\n\n\t\t/*\n\t\t ██████  ███████ ████████     ██    ██ ██ ███████ ██ ██████  ██      ███████     ████████ ██████  ███████ ███████\n\t\t██       ██         ██        ██    ██ ██ ██      ██ ██   ██ ██      ██             ██    ██   ██ ██      ██\n\t\t██   ███ █████      ██        ██    ██ ██ ███████ ██ ██████  ██      █████          ██    ██████  █████   █████\n\t\t██    ██ ██         ██         ██  ██  ██      ██ ██ ██   ██ ██      ██             ██    ██   ██ ██      ██\n\t\t ██████  ███████    ██          ████   ██ ███████ ██ ██████  ███████ ███████        ██    ██   ██ ███████ ███████\n\t\t*/\n\t\tEngine.prototype.get_visible_tree = function () {\n\t\t\t/*\n\t\t\t * Get only the visible elements from Loki.\n\t\t\t */\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> get_visible_tree\");\n\n\t\t\t//TODO: Strip LokiJS metadata. https://github.com/techfort/LokiJS/issues/346\n\t\t\tvar tree = this.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({\n\t\t\t\t\t[angularMultiSelectConstants.INTERNAL_KEY_TREE_VISIBILITY]: angularMultiSelectConstants.INTERNAL_DATA_VISIBLE\n\t\t\t\t})\n\t\t\t\t.simplesort(angularMultiSelectConstants.INTERNAL_KEY_ORDER, false)\n\t\t\t\t.data();\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> get_visible_tree\");\n\n\t\t\treturn tree;\n\t\t};\n\n\t\t/*\n\t\t ██████  ███████ ████████     ███████ ██ ██   ████████ ███████ ██████  ███████ ██████      ████████ ██████  ███████ ███████\n\t\t██       ██         ██        ██      ██ ██      ██    ██      ██   ██ ██      ██   ██        ██    ██   ██ ██      ██\n\t\t██   ███ █████      ██        █████   ██ ██      ██    █████   ██████  █████   ██   ██        ██    ██████  █████   █████\n\t\t██    ██ ██         ██        ██      ██ ██      ██    ██      ██   ██ ██      ██   ██        ██    ██   ██ ██      ██\n\t\t ██████  ███████    ██        ██      ██ ███████ ██    ███████ ██   ██ ███████ ██████         ██    ██   ██ ███████ ███████\n\t\t*/\n\t\tEngine.prototype.get_filtered_tree = function (query) {\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> get_filtered_tree\");\n\n\t\t\tvar filter = [];\n\t\t\tfor (var i = 0; i < query.length; i++) {\n\t\t\t\tvar item = query[i];\n\t\t\t\tfilter.push({\n\t\t\t\t\t[item.field]: {\n\t\t\t\t\t\t'$contains': item.query\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//TODO: Strip LokiJS metadata. https://github.com/techfort/LokiJS/issues/346\n\t\t\tvar tree = this.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({\n\t\t\t\t\t'$and': filter\n\t\t\t\t})\n\t\t\t\t.simplesort(angularMultiSelectConstants.INTERNAL_KEY_ORDER, false)\n\t\t\t\t.data();\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> get_filtered_tree\");\n\n\t\t\treturn tree;\n\t\t};\n\n\t\t/*\n\t\t ██████  ███████ ████████      ██████ ██   ██ ███████  ██████ ██   ██ ███████ ██████      ████████ ██████  ███████ ███████\n\t\t██       ██         ██        ██      ██   ██ ██      ██      ██  ██  ██      ██   ██        ██    ██   ██ ██      ██\n\t\t██   ███ █████      ██        ██      ███████ █████   ██      █████   █████   ██   ██        ██    ██████  █████   █████\n\t\t██    ██ ██         ██        ██      ██   ██ ██      ██      ██  ██  ██      ██   ██        ██    ██   ██ ██      ██\n\t\t ██████  ███████    ██         ██████ ██   ██ ███████  ██████ ██   ██ ███████ ██████         ██    ██   ██ ███████ ███████\n\t\t*/\n\t\tEngine.prototype.get_checked_tree = function (filter) {\n\t\t\t/*\n\t\t\t * Get only the checked elements from Loki.\n\t\t\t */\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> get_checked_tree\");\n\n\t\t\tvar query_filter;\n\t\t\tswitch (filter) {\n\t\t\t\tcase angularMultiSelectConstants.FIND_LEAFS:\n\t\t\t\t\tquery_filter = [\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED\n\t\t\t\t\t];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase angularMultiSelectConstants.FIND_LEAFS_MIXED_NODES:\n\t\t\t\t\tquery_filter = [\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED,\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED,\n\t\t\t\t\t];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase angularMultiSelectConstants.FIND_LEAFS_CHECKED_NODES:\n\t\t\t\t\tquery_filter = [\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED,\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED,\n\t\t\t\t\t];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase angularMultiSelectConstants.FIND_LEAFS_MIXED_CHECKED_NODES:\n\t\t\t\t\tquery_filter = [\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED,\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED,\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED\n\t\t\t\t\t];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase angularMultiSelectConstants.FIND_MIXED_NODES:\n\t\t\t\t\tquery_filter = [\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED\n\t\t\t\t\t];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase angularMultiSelectConstants.FIND_CHECKED_NODES:\n\t\t\t\t\tquery_filter = [\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED\n\t\t\t\t\t];\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase angularMultiSelectConstants.FIND_MIXED_CHECKED_NODES:\n\t\t\t\t\tquery_filter = [\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED,\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED\n\t\t\t\t\t];\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tquery_filter = [\n\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED\n\t\t\t\t\t];\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t//TODO: Strip LokiJS metadata. https://github.com/techfort/LokiJS/issues/346\n\t\t\tvar tree = this.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({\n\t\t\t\t\t[this.CHECKED_PROPERTY]: {\n\t\t\t\t\t\t'$in': query_filter\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.simplesort(angularMultiSelectConstants.INTERNAL_KEY_ORDER, false)\n\t\t\t\t.data();\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> get_checked_tree\");\n\n\t\t\treturn tree;\n\t\t};\n\n\t\t/*\n\t\t████████  ██████   ██████   ██████  ██      ███████      ██████  ██████  ███████ ███    ██\n\t\t   ██    ██    ██ ██       ██       ██      ██          ██    ██ ██   ██ ██      ████   ██\n\t\t   ██    ██    ██ ██   ███ ██   ███ ██      █████       ██    ██ ██████  █████   ██ ██  ██\n\t\t   ██    ██    ██ ██    ██ ██    ██ ██      ██          ██    ██ ██      ██      ██  ██ ██\n\t\t   ██     ██████   ██████   ██████  ███████ ███████      ██████  ██      ███████ ██   ████\n\t\t*/\n\t\tEngine.prototype.toggle_open_node = function (item) {\n\t\t\t/*\n\t\t\t * Toggle the open/closed state of an element.\n\t\t\t * Note that leafs are not supposed to be toggleable.\n\t\t\t */\n\t\t\tif (item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] === 0) return;\n\n\t\t\tif (item[this.OPEN_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_OPEN) {\n\t\t\t\tthis.close_node(item);\n\t\t\t} else {\n\t\t\t\tthis.open_node(item);\n\t\t\t}\n\n\t\t\tthis.on_visual_change();\n\t\t};\n\n\t\t/*\n\t\t ██████  ██████  ███████ ███    ██     ███    ██  ██████  ██████  ███████\n\t\t██    ██ ██   ██ ██      ████   ██     ████   ██ ██    ██ ██   ██ ██\n\t\t██    ██ ██████  █████   ██ ██  ██     ██ ██  ██ ██    ██ ██   ██ █████\n\t\t██    ██ ██      ██      ██  ██ ██     ██  ██ ██ ██    ██ ██   ██ ██\n\t\t ██████  ██      ███████ ██   ████     ██   ████  ██████  ██████  ███████\n\t\t*/\n\t\tEngine.prototype.open_node = function (item) {\n\t\t\t/*\n\t\t\t * Open an item.\n\t\t\t * First, mark the item itself as open, then find all\n\t\t\t * the children items of that item and iterate over the\n\t\t\t * results. For each item:\n\t\t\t *\n\t\t\t * If the item is a node and it's closed, we'll create\n\t\t\t * a rule such that it will skip the next N items on the\n\t\t\t * result. Else mark the item as visible.\n\t\t\t */\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> open_node\");\n\n\t\t\tvar skip = 0;\n\n\t\t\tthis.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({\n\t\t\t\t\t[this.ID_PROPERTY]: item[this.ID_PROPERTY]\n\t\t\t\t})\n\t\t\t\t.update((obj) => {\n\t\t\t\t\tobj[this.OPEN_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_OPEN;\n\t\t\t\t});\n\n\t\t\tthis.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({\n\t\t\t\t\t'$and': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[angularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID]: {\n\t\t\t\t\t\t\t\t'$contains': item[this.ID_PROPERTY]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[angularMultiSelectConstants.INTERNAL_KEY_LEVEL]: {\n\t\t\t\t\t\t\t\t'$gte': item[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] + 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t\t.limit(item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] + item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_NODES])\n\t\t\t\t.update((obj) => {\n\t\t\t\t\tif (skip > 0) {\n\t\t\t\t\t\tskip--;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] > 0 &&\n\t\t\t\t\t\tobj[this.OPEN_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_CLOSED\n\t\t\t\t\t) {\n\t\t\t\t\t\tskip = obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] + obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_NODES];\n\t\t\t\t\t}\n\n\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_TREE_VISIBILITY] = angularMultiSelectConstants.INTERNAL_DATA_VISIBLE;\n\t\t\t\t});\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> open_node\");\n\t\t};\n\n\t\t/*\n\t\t ██████ ██       ██████  ███████ ███████     ███    ██  ██████  ██████  ███████\n\t\t██      ██      ██    ██ ██      ██          ████   ██ ██    ██ ██   ██ ██\n\t\t██      ██      ██    ██ ███████ █████       ██ ██  ██ ██    ██ ██   ██ █████\n\t\t██      ██      ██    ██      ██ ██          ██  ██ ██ ██    ██ ██   ██ ██\n\t\t ██████ ███████  ██████  ███████ ███████     ██   ████  ██████  ██████  ███████\n\t\t*/\n\t\tEngine.prototype.close_node = function (item) {\n\t\t\t/*\n\t\t\t * Close an item.\n\t\t\t * First, mark the item itself as closed, then find all\n\t\t\t * children and mark then as invisible.\n\t\t\t */\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> close_node\");\n\n\t\t\tthis.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({\n\t\t\t\t\t[this.ID_PROPERTY]: item[this.ID_PROPERTY]\n\t\t\t\t})\n\t\t\t\t.update((obj) => {\n\t\t\t\t\tobj[this.OPEN_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_CLOSED;\n\t\t\t\t});\n\n\t\t\tthis.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({\n\t\t\t\t\t'$and': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[angularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID]: {\n\t\t\t\t\t\t\t\t'$contains': item[this.ID_PROPERTY]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[angularMultiSelectConstants.INTERNAL_KEY_LEVEL]: {\n\t\t\t\t\t\t\t\t'$gte': item[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] + 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t\t.limit(item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] + item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_NODES])\n\t\t\t\t.update((obj) => {\n\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_TREE_VISIBILITY] = angularMultiSelectConstants.INTERNAL_DATA_INVISIBLE;\n\t\t\t\t});\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> close_node\");\n\t\t};\n\n\t\t/*\n\t\t ██████ ██   ██ ███████  ██████ ██   ██      █████  ██      ██\n\t\t██      ██   ██ ██      ██      ██  ██      ██   ██ ██      ██\n\t\t██      ███████ █████   ██      █████       ███████ ██      ██\n\t\t██      ██   ██ ██      ██      ██  ██      ██   ██ ██      ██\n\t\t ██████ ██   ██ ███████  ██████ ██   ██     ██   ██ ███████ ███████\n\t\t*/\n\t\tEngine.prototype.check_all = function () {\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> check_all\");\n\n\t\t\tthis.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({})\n\t\t\t\t.update((obj) => {\n\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] === 0) {\n\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED;\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] = obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS];\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES] = 0;\n\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_LEAFS] = this.stats[angularMultiSelectConstants.INTERNAL_STATS_TOTAL_LEAFS];\n\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES] = this.stats[angularMultiSelectConstants.INTERNAL_STATS_TOTAL_NODES];\n\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> check_all\");\n\n\t\t\tthis.on_data_change();\n\t\t};\n\n\t\t/*\n\t\t██    ██ ███    ██  ██████ ██   ██ ███████  ██████ ██   ██      █████  ██      ██\n\t\t██    ██ ████   ██ ██      ██   ██ ██      ██      ██  ██      ██   ██ ██      ██\n\t\t██    ██ ██ ██  ██ ██      ███████ █████   ██      █████       ███████ ██      ██\n\t\t██    ██ ██  ██ ██ ██      ██   ██ ██      ██      ██  ██      ██   ██ ██      ██\n\t\t ██████  ██   ████  ██████ ██   ██ ███████  ██████ ██   ██     ██   ██ ███████ ███████\n\t\t*/\n\t\tEngine.prototype.uncheck_all = function () {\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> uncheck_all\");\n\n\t\t\tthis.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({})\n\t\t\t\t.update((obj) => {\n\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] === 0) {\n\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_LEAF_UNCHECKED;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED;\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] = 0;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_LEAFS] = 0;\n\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES] = 0;\n\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES] = this.stats[angularMultiSelectConstants.INTERNAL_STATS_TOTAL_NODES];\n\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> uncheck_all\");\n\n\t\t\tthis.on_data_change();\n\t\t};\n\n\t\t/*\n\t\t████████  ██████   ██████   ██████  ██      ███████      ██████ ██   ██ ███████  ██████ ██   ██\n\t\t   ██    ██    ██ ██       ██       ██      ██          ██      ██   ██ ██      ██      ██  ██\n\t\t   ██    ██    ██ ██   ███ ██   ███ ██      █████       ██      ███████ █████   ██      █████\n\t\t   ██    ██    ██ ██    ██ ██    ██ ██      ██          ██      ██   ██ ██      ██      ██  ██\n\t\t   ██     ██████   ██████   ██████  ███████ ███████      ██████ ██   ██ ███████  ██████ ██   ██\n\t\t*/\n\t\tEngine.prototype.toggle_check_node = function (item, ops) {\n\t\t\t/*\n\t\t\t * Toggle the checked state on an item.\n\t\t\t * Note that there are, in total, 5 different states:\n\t\t\t *\n\t\t\t * true: checked leaf.\n\t\t\t * false: unchecked leaf.\n\t\t\t * -1: all children leafs of the node are unchecked.\n\t\t\t * 0: at least one children leaf of the node is checked.\n\t\t\t * 1: all children leafs of the node are checked.\n\t\t\t *\n\t\t\t * If the node/item is (fully) checked, uncheck, else check.\n\t\t\t */\n\t\t\tswitch (item[this.CHECKED_PROPERTY]) {\n\t\t\t\tcase angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED:\n\t\t\t\tcase angularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED:\n\t\t\t\t\tthis.uncheck_node(item, ops);\n\t\t\t\t\tbreak;\n\t\t\t\tcase angularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED:\n\t\t\t\tcase angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED:\n\t\t\t\tcase angularMultiSelectConstants.INTERNAL_DATA_LEAF_UNCHECKED:\n\t\t\t\t\tthis.check_node(item, ops);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t/*\n\t\t ██████ ██   ██ ███████  ██████ ██   ██     ███    ██  ██████  ██████  ███████     ██████  ██    ██\n\t\t██      ██   ██ ██      ██      ██  ██      ████   ██ ██    ██ ██   ██ ██          ██   ██  ██  ██\n\t\t██      ███████ █████   ██      █████       ██ ██  ██ ██    ██ ██   ██ █████       ██████    ████\n\t\t██      ██   ██ ██      ██      ██  ██      ██  ██ ██ ██    ██ ██   ██ ██          ██   ██    ██\n\t\t ██████ ██   ██ ███████  ██████ ██   ██     ██   ████  ██████  ██████  ███████     ██████     ██\n\t\t*/\n\t\tEngine.prototype.check_node_by = function (where) {\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> check_node_by\");\n\n\t\t\tvar [key, value] = where;\n\t\t\tvar item = this.collection\n\t\t\t\t.findOne({\n\t\t\t\t\t\"$and\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[key]: value\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[this.CHECKED_PROPERTY]: {\n\t\t\t\t\t\t\t\t'$nin': [\n\t\t\t\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED,\n\t\t\t\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t});\n\n\t\t\tif (item !== null) {\n\t\t\t\tthis.check_node(item);\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> check_node_by\");\n\t\t};\n\n\t\t/*\n\t\t ██████ ██   ██ ███████  ██████ ██   ██     ███    ██  ██████  ██████  ███████\n\t\t██      ██   ██ ██      ██      ██  ██      ████   ██ ██    ██ ██   ██ ██\n\t\t██      ███████ █████   ██      █████       ██ ██  ██ ██    ██ ██   ██ █████\n\t\t██      ██   ██ ██      ██      ██  ██      ██  ██ ██ ██    ██ ██   ██ ██\n\t\t ██████ ██   ██ ███████  ██████ ██   ██     ██   ████  ██████  ██████  ███████\n\t\t*/\n\t\tEngine.prototype.check_node = function (item, ops) {\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> check_node\");\n\n\t\t\tvar default_ops = {\n\t\t\t\tcall_on_data_change: true\n\t\t\t};\n\n\t\t\tops = ops || {};\n\t\t\tfor (var k in default_ops) {\n\t\t\t\tif (!ops.hasOwnProperty(k)) {\n\t\t\t\t\tops[k] = default_ops[k];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Used for internal calculations.\n\t\t\t */\n\t\t\tvar time = new Date();\n\t\t\tvar diff_checked_children = 0;\n\t\t\tvar currently_checked_children = item[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN];\n\n\t\t\t//TODO: Optimize when MAX_CHECKED_LEAFS is set?\n\n\t\t\t/*\n\t\t\t * If the item is a leaf, mark it as checked.\n\t\t\t * If the item is a note, set it's counter of checked leafs to the number of leafs it contains.\n\t\t\t */\n\t\t\tthis.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({\n\t\t\t\t\t[this.ID_PROPERTY]: item[this.ID_PROPERTY]\n\t\t\t\t})\n\t\t\t\t.update((obj) => {\n\t\t\t\t\tif (item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] === 0) {\n\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_LEAFS]++;\n\n\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (obj[this.CHECKED_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED) {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES]--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES]++;\n\n\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED;\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] = obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS];\n\t\t\t\t\t\tdiff_checked_children = obj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] - currently_checked_children;\n\t\t\t\t\t}\n\n\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION] = time.getTime();\n\t\t\t\t});\n\n\t\t\t/*\n\t\t\t * If the passed item is a leaf, search all parent nodes,\n\t\t\t * add 1 to their checked_children counter and set their\n\t\t\t * checked state based on the checked_children counter.\n\t\t\t *\n\t\t\t */\n\t\t\tif (item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] === 0) {\n\t\t\t\tthis.collection\n\t\t\t\t\t.chain()\n\t\t\t\t\t.find({\n\t\t\t\t\t\t[this.ID_PROPERTY]: {\n\t\t\t\t\t\t\t'$in': item[angularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID]\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.simplesort(angularMultiSelectConstants.INTERNAL_KEY_ORDER, true)\n\t\t\t\t\t.update((obj) => {\n\t\t\t\t\t\tif (obj[this.CHECKED_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED) {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES]--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] + 1 === obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS]) {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES]++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN]++; // We can't overflow this as we're checking an unchecked item\n\t\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] === obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS]) {\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION] = time.getTime();\n\t\t\t\t\t});\n\t\t\t/*\n\t\t\t * If it's a node:\n\t\t\t *     1. Search all children leafs and nodes and mark them as checked.\n\t\t\t *     2. Search all parent nodes,\n\t\t\t *        add N to their checked_children counter and\n\t\t\t *        set their checked state based on the checked_children counter.\n\t\t\t *        N is the difference between the checked leafs of the nodes we're checking\n\t\t\t *        before and after the operation.\n\t\t\t */\n\t\t\t} else {\n\t\t\t\tthis.collection\n\t\t\t\t\t.chain()\n\t\t\t\t\t.find({\n\t\t\t\t\t\t'$and': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t[angularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID]: {\n\t\t\t\t\t\t\t\t\t'$contains': item[this.ID_PROPERTY]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t[angularMultiSelectConstants.INTERNAL_KEY_LEVEL]: {\n\t\t\t\t\t\t\t\t\t'$gte': item[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] + 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t[this.CHECKED_PROPERTY]: {\n\t\t\t\t\t\t\t\t\t'$in': [\n\t\t\t\t\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED,\n\t\t\t\t\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED,\n\t\t\t\t\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_LEAF_UNCHECKED\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\t\t\t\t\t.simplesort(angularMultiSelectConstants.INTERNAL_KEY_ORDER, false)\n\t\t\t\t\t.update((obj) => {\n\t\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] === 0) {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_LEAFS]++;\n\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES]++;\n\t\t\t\t\t\t\tif (obj[this.CHECKED_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED) {\n\t\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES]--;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED;\n\t\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] = obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION] = time.getTime();\n\t\t\t\t\t});\n\n\t\t\t\tthis.collection\n\t\t\t\t\t.chain()\n\t\t\t\t\t.find({\n\t\t\t\t\t\t[this.ID_PROPERTY]: {\n\t\t\t\t\t\t\t'$in': item[angularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID]\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.simplesort(angularMultiSelectConstants.INTERNAL_KEY_ORDER, true)\n\t\t\t\t\t.update((obj) => {\n\t\t\t\t\t\tif (obj[this.CHECKED_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED) {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES]--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] + diff_checked_children === obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS]) {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES]++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] += diff_checked_children;\n\t\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] === obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS]) {\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION] = time.getTime();\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> check_node\");\n\n\t\t\tif (ops.call_on_data_change) {\n\t\t\t\tthis.on_data_change();\n\t\t\t}\n\t\t};\n\n\t\t/*\n\t\t██    ██ ███    ██  ██████ ██   ██ ███████  ██████ ██   ██     ███    ██  ██████  ██████  ███████\n\t\t██    ██ ████   ██ ██      ██   ██ ██      ██      ██  ██      ████   ██ ██    ██ ██   ██ ██\n\t\t██    ██ ██ ██  ██ ██      ███████ █████   ██      █████       ██ ██  ██ ██    ██ ██   ██ █████\n\t\t██    ██ ██  ██ ██ ██      ██   ██ ██      ██      ██  ██      ██  ██ ██ ██    ██ ██   ██ ██\n\t\t ██████  ██   ████  ██████ ██   ██ ███████  ██████ ██   ██     ██   ████  ██████  ██████  ███████\n\t\t*/\n\t\tEngine.prototype.uncheck_node = function (item, ops) {\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> uncheck_node\");\n\n\t\t\tvar default_ops = {\n\t\t\t\tcall_on_data_change: true\n\t\t\t};\n\n\t\t\tops = ops || {};\n\t\t\tfor (var k in default_ops) {\n\t\t\t\tif (!ops.hasOwnProperty(k)) {\n\t\t\t\t\tops[k] = default_ops[k];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Used for internal calculations.\n\t\t\t */\n\t\t\tvar time = new Date();\n\t\t\tvar diff_checked_children = 0;\n\t\t\tvar currently_checked_children = item[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN];\n\n\t\t\t/*\n\t\t\t * If the item is a leaf, mark it as unchecked.\n\t\t\t * If the item is a note, set it's counter of checked leafs to the number of leafs it contains.\n\t\t\t */\n\t\t\tthis.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({\n\t\t\t\t\t[this.ID_PROPERTY]: item[this.ID_PROPERTY]\n\t\t\t\t})\n\t\t\t\t.update((obj) => {\n\t\t\t\t\tif (item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] === 0) {\n\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_LEAFS]--;\n\n\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_LEAF_UNCHECKED;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES]--;\n\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES]++;\n\n\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED;\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] = 0;\n\t\t\t\t\t\tdiff_checked_children = currently_checked_children - obj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN];\n\t\t\t\t\t}\n\n\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION] = time.getTime();\n\t\t\t\t});\n\n\t\t\t/*\n\t\t\t * If the passed item is a leaf, search all parent nodes,\n\t\t\t * substract 1 from their checked_children counter and set their\n\t\t\t * checked state based on the checked_children counter.\n\t\t\t */\n\t\t\tif (item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] === 0) {\n\t\t\t\tthis.collection\n\t\t\t\t\t.chain()\n\t\t\t\t\t.find({\n\t\t\t\t\t\t[this.ID_PROPERTY]: {\n\t\t\t\t\t\t\t'$in': item[angularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID]\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.simplesort(angularMultiSelectConstants.INTERNAL_KEY_ORDER, true)\n\t\t\t\t\t.update((obj) => {\n\t\t\t\t\t\tif (obj[this.CHECKED_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED) {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES]--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] - 1 === 0) {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES]++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN]--; // We can't underflow this as we're unchecking a checked item\n\t\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] === 0) {\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION] = time.getTime();\n\t\t\t\t\t});\n\t\t\t/*\n\t\t\t * If it's a node:\n\t\t\t *     1. Search all children leafs and nodes and mark them as unchecked.\n\t\t\t *     2. Search all parent nodes,\n\t\t\t *        substract N from their checked_children counter and\n\t\t\t *        set their checked state based on the checked_children counter.\n\t\t\t *        N is the difference between the checked leafs of the nodes we're checking\n\t\t\t *        before and after the operation.\n\t\t\t */\n\t\t\t} else {\n\t\t\t\tthis.collection\n\t\t\t\t\t.chain()\n\t\t\t\t\t.find({\n\t\t\t\t\t\t'$and': [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t[angularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID]: {\n\t\t\t\t\t\t\t\t\t'$contains': item[this.ID_PROPERTY]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t[angularMultiSelectConstants.INTERNAL_KEY_LEVEL]: {\n\t\t\t\t\t\t\t\t\t'$gte': item[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] + 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t[this.CHECKED_PROPERTY]: {\n\t\t\t\t\t\t\t\t\t'$in': [\n\t\t\t\t\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED,\n\t\t\t\t\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED,\n\t\t\t\t\t\t\t\t\t\tangularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\t\t\t\t\t.simplesort(angularMultiSelectConstants.INTERNAL_KEY_ORDER, false)\n\t\t\t\t\t.update((obj) => {\n\t\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] === 0) {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_LEAFS]--;\n\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_LEAF_UNCHECKED;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES]++;\n\t\t\t\t\t\t\tif (obj[this.CHECKED_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED) {\n\t\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES]--;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED;\n\t\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION] = time.getTime();\n\t\t\t\t\t});\n\n\t\t\t\tthis.collection\n\t\t\t\t\t.chain()\n\t\t\t\t\t.find({\n\t\t\t\t\t\t[this.ID_PROPERTY]: {\n\t\t\t\t\t\t\t'$in': item[angularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID]\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.simplesort(angularMultiSelectConstants.INTERNAL_KEY_ORDER, true)\n\t\t\t\t\t.update((obj) => {\n\t\t\t\t\t\tif (obj[this.CHECKED_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED) {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_CHECKED_NODES]--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] - diff_checked_children === 0) {\n\t\t\t\t\t\t\tthis.stats[angularMultiSelectConstants.INTERNAL_STATS_UNCHECKED_NODES]++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] -= diff_checked_children;\n\t\t\t\t\t\tif (obj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] === 0) {\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tobj[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobj[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION] = time.getTime();\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> uncheck_node\");\n\n\t\t\tif (ops.call_on_data_change) {\n\t\t\t\tthis.on_data_change();\n\t\t\t}\n\t\t};\n\n\t\t/*\n\t\t██    ██ ███    ██  ██████ ██   ██ ███████  ██████ ██   ██     ███████ ██ ██████  ███████ ████████\n\t\t██    ██ ████   ██ ██      ██   ██ ██      ██      ██  ██      ██      ██ ██   ██ ██         ██\n\t\t██    ██ ██ ██  ██ ██      ███████ █████   ██      █████       █████   ██ ██████  ███████    ██\n\t\t██    ██ ██  ██ ██ ██      ██   ██ ██      ██      ██  ██      ██      ██ ██   ██      ██    ██\n\t\t ██████  ██   ████  ██████ ██   ██ ███████  ██████ ██   ██     ██      ██ ██   ██ ███████    ██\n\t\t*/\n\t\tEngine.prototype.uncheck_first = function (n) {\n\t\t\t/*\n\t\t\t * Find the oldest n leaf that have been marked as checked and uncheck them.\n\t\t\t * This function is used to control the maximum amount of checked leafs.\n\t\t\t */\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + \" -> uncheck_first\");\n\n\t\t\tn = n || 1;\n\n\t\t\tvar leaf = this.collection\n\t\t\t\t.chain()\n\t\t\t\t.find({\n\t\t\t\t\t'$and': [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[this.CHECKED_PROPERTY]: angularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS]: 0\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\n\t\t\t\t})\n\t\t\t\t/*\n\t\t\t\t * Each element is guaranteed to have an INTERNAL_KEY_CHECKED_MODIFICATION\n\t\t\t\t * field that contains a unixtime date of the last time the item has\n\t\t\t\t * changed it's checked state.\n\t\t\t\t * If the fields of two elements match, then sort by the order field.\n\t\t\t\t * This exception should happen only when this method is called on a verbatim\n\t\t\t\t * tree that hasn't been modified in any way, meaning, right after a\n\t\t\t\t * call to this.insert().\n\t\t\t\t */\n\t\t\t\t.sort(function (a, b) {\n\t\t\t\t\tvar diff = a[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION] - b[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION];\n\t\t\t\t\tif (diff === 0) {\n\t\t\t\t\t\treturn a[angularMultiSelectConstants.INTERNAL_KEY_ORDER] - b[angularMultiSelectConstants.INTERNAL_KEY_ORDER];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn diff;\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.limit(n)\n\t\t\t\t.data();\n\n\t\t\tfor (var i = 0; i < leaf.length; i++) {\n\t\t\t\tthis.toggle_check_node(leaf[i], {\n\t\t\t\t\tcall_on_data_change: false\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + \" -> uncheck_first\");\n\t\t};\n\n\t\treturn Engine;\n\t}\n]);\n"]}