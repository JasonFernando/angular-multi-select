{"version":3,"sources":["../../src/angular-multi-select-data-converter.js"],"names":[],"mappings":"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","file":"angular-multi-select-data-converter.js","sourcesContent":["var angular_multi_select_data_converter = angular.module('angular-multi-select-data-converter', [\n\t'angular-multi-select-utils',\n\t'angular-multi-select-constants'\n]);\n\nangular_multi_select_data_converter.factory('angularMultiSelectDataConverter', [\n\t'angularMultiSelectUtils',\n\t'angularMultiSelectConstants',\n\tfunction (angularMultiSelectUtils, angularMultiSelectConstants) {\n\t\t'use strict';\n\t\t/*\n\t\t ██████  ██████  ███    ██ ███████ ████████ ██████  ██    ██  ██████ ████████  ██████  ██████\n\t\t██      ██    ██ ████   ██ ██         ██    ██   ██ ██    ██ ██         ██    ██    ██ ██   ██\n\t\t██      ██    ██ ██ ██  ██ ███████    ██    ██████  ██    ██ ██         ██    ██    ██ ██████\n\t\t██      ██    ██ ██  ██ ██      ██    ██    ██   ██ ██    ██ ██         ██    ██    ██ ██   ██\n\t\t ██████  ██████  ██   ████ ███████    ██    ██   ██  ██████   ██████    ██     ██████  ██   ██\n\t\t*/\n\t\tvar DataConverter = function (ops) {\n\t\t\tthis.amsu = new angularMultiSelectUtils();\n\t\t\tObject.assign(this, this.amsu.sanitize_ops(ops));\n\t\t};\n\n\t\t/*\n\t\t ██████ ██   ██ ███████  ██████ ██   ██     ██████  ██████  ███████ ██████  ███████  ██████  ██    ██ ██ ███████ ██ ████████ ███████ ███████\n\t\t██      ██   ██ ██      ██      ██  ██      ██   ██ ██   ██ ██      ██   ██ ██      ██    ██ ██    ██ ██ ██      ██    ██    ██      ██\n\t\t██      ███████ █████   ██      █████       ██████  ██████  █████   ██████  █████   ██    ██ ██    ██ ██ ███████ ██    ██    █████   ███████\n\t\t██      ██   ██ ██      ██      ██  ██      ██      ██   ██ ██      ██   ██ ██      ██ ▄▄ ██ ██    ██ ██      ██ ██    ██    ██           ██\n\t\t ██████ ██   ██ ███████  ██████ ██   ██     ██      ██   ██ ███████ ██   ██ ███████  ██████   ██████  ██ ███████ ██    ██    ███████ ███████\n\t\t                                                                                        ▀▀\n\t\t*/\n\t\tDataConverter.prototype.check_prerequisites = function (data) {\n\t\t\t/*\n\t\t\t * Takes an array of data and walks through each element object\n\t\t\t * and checks if each objects has:\n\t\t\t *\n\t\t\t * - a valid ID. If it doesn't, it generates one.\n\t\t\t * - open property. If it's not 'true' (strictly compared), it\n\t\t\t *   creates one and set's it to false.\n\t\t\t * - children property. If it's not an array or if it's empty,\n\t\t\t *   it deletes the property, else it will delete the checked\n\t\t\t *   property. Note that nodes can't have a checked property at\n\t\t\t *   this step of the process.\n\t\t\t * - checked property. If it's not 'true' (strictly compared),\n\t\t\t *   creates one and set's it to false.\n\t\t\t *\n\t\t\t * Note that you can completely skip this step (thus saving some\n\t\t\t * CPU cycles) if you are sure that all objects in your input data:\n\t\t\t *\n\t\t\t * - have valid and unique ID.\n\t\t\t * - have open property, which is boolean and false for leafs\n\t\t\t * - children properties are non-empty arrays\n\t\t\t * - only leafs have a checked property and it's a boolean\n\t\t\t */\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + ' -> check_prerequisites');\n\n\t\t\tif (!Array.isArray(data)) return false;\n\n\t\t\tvar ids = [];\n\t\t\tvar ctx = this;\n\t\t\tvar last_id = 1;\n\t\t\tvar correct = true;\n\n\t\t\tfunction gen_id () {\n\t\t\t\twhile (ids.indexOf(last_id) !== -1) {\n\t\t\t\t\tlast_id++;\n\t\t\t\t}\n\n\t\t\t\treturn last_id;\n\t\t\t}\n\n\t\t\tfunction process_items (items) {\n\t\t\t\tif (correct === false) return;\n\n\t\t\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\t\t\tvar item = items[i];\n\n\t\t\t\t\tif (item.constructor.toString().indexOf('Array') !== -1) {\n\t\t\t\t\t\treturn (correct = false);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check for id field.\n\t\t\t\t\t// If not present, assign one\n\t\t\t\t\tif (\n\t\t\t\t\t\t!(ctx.ID_PROPERTY in item) ||\n\t\t\t\t\t\tids.indexOf(item[ctx.ID_PROPERTY]) !== -1\n\t\t\t\t\t) {\n\t\t\t\t\t\titem[ctx.ID_PROPERTY] = gen_id();\n\t\t\t\t\t}\n\t\t\t\t\tids.push(item[ctx.ID_PROPERTY]);\n\n\t\t\t\t\t// Check for open field.\n\t\t\t\t\t// If open field doesn't exist or is not \"true\", set to false\n\t\t\t\t\tif (\n\t\t\t\t\t\t!(ctx.OPEN_PROPERTY in item) ||\n\t\t\t\t\t\titem[ctx.OPEN_PROPERTY] !== angularMultiSelectConstants.INPUT_DATA_OPEN\n\t\t\t\t\t) {\n\t\t\t\t\t\titem[ctx.OPEN_PROPERTY] = angularMultiSelectConstants.INPUT_DATA_CLOSED;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check for children field.\n\t\t\t\t\t// If not an array or empty array, remove it.\n\t\t\t\t\tif (\n\t\t\t\t\t\tctx.CHILDREN_PROPERTY in item &&\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t!Array.isArray(item[ctx.CHILDREN_PROPERTY]) ||\n\t\t\t\t\t\t\titem[ctx.CHILDREN_PROPERTY].length === 0\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tdelete item[ctx.CHILDREN_PROPERTY];\n\t\t\t\t\t}\n\n\t\t\t\t\t// If children field is present, remove \"checked\" field.\n\t\t\t\t\t// If checked field is present, but value is not boolean or 1,\n\t\t\t\t\t// set to false.\n\t\t\t\t\tif (ctx.CHILDREN_PROPERTY in item) {\n\t\t\t\t\t\tdelete item[ctx.CHECKED_PROPERTY];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tctx.CHECKED_PROPERTY in item &&\n\t\t\t\t\t\titem[ctx.CHECKED_PROPERTY] !== angularMultiSelectConstants.INPUT_DATA_CHECKED\n\t\t\t\t\t) {\n\t\t\t\t\t\titem[ctx.CHECKED_PROPERTY] = angularMultiSelectConstants.INPUT_DATA_UNCHECKED;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t!(ctx.CHILDREN_PROPERTY in item) &&\n\t\t\t\t\t\t!(ctx.CHECKED_PROPERTY in item)\n\t\t\t\t\t) {\n\t\t\t\t\t\titem[ctx.CHECKED_PROPERTY] = angularMultiSelectConstants.INPUT_DATA_UNCHECKED;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ctx.CHILDREN_PROPERTY in item) {\n\t\t\t\t\t\tprocess_items(item[ctx.CHILDREN_PROPERTY]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprocess_items(data);\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + ' -> check_prerequisites');\n\n\t\t\t// Return data array or false if something is wrong.\n\t\t\treturn correct ? data : correct;\n\t\t};\n\n\t\t/*\n\t\t████████  ██████      ██ ███    ██ ████████ ███████ ██████  ███    ██  █████  ██\n\t\t   ██    ██    ██     ██ ████   ██    ██    ██      ██   ██ ████   ██ ██   ██ ██\n\t\t   ██    ██    ██     ██ ██ ██  ██    ██    █████   ██████  ██ ██  ██ ███████ ██\n\t\t   ██    ██    ██     ██ ██  ██ ██    ██    ██      ██   ██ ██  ██ ██ ██   ██ ██\n\t\t   ██     ██████      ██ ██   ████    ██    ███████ ██   ██ ██   ████ ██   ██ ███████\n\t\t*/\n\t\tDataConverter.prototype.to_internal = function (data) {\n\t\t\t/*\n\t\t\t * Takes an array of (nested) objects and flattens it, while\n\t\t\t * also adding some internal properties required for faster\n\t\t\t * un/check and state actions.\n\t\t\t *\n\t\t\t * Note that you can skip this step (thus saving some CPU cycles)\n\t\t\t * only if you're completely sure how this method works, what and\n\t\t\t * how it does what it does.\n\t\t\t */\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + ' -> to_internal');\n\n\t\t\tvar order = 1;\n\t\t\tvar ctx = this;\n\t\t\tvar i, j, item;\n\t\t\tvar final_data = [];\n\n\t\t\tfunction process_items (items, level) {\n\t\t\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\t\t\titem = items[i];\n\n\t\t\t\t\tvar final_item = angular.copy(item);\n\t\t\t\t\tdelete final_item[ctx.CHECKED_PROPERTY];\n\t\t\t\t\tdelete final_item[ctx.CHILDREN_PROPERTY];\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tctx.CHECKED_PROPERTY in item &&\n\t\t\t\t\t\ttypeof(item[ctx.CHECKED_PROPERTY]) === 'boolean'\n\t\t\t\t\t) {\n\t\t\t\t\t\tfinal_item[ctx.CHECKED_PROPERTY] = item[ctx.CHECKED_PROPERTY];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfinal_item[ctx.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECK_UNDEFINED;\n\t\t\t\t\t}\n\n\t\t\t\t\t//Assigned in order\n\t\t\t\t\tfinal_item[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] = level;\n\t\t\t\t\tfinal_item[angularMultiSelectConstants.INTERNAL_KEY_ORDER] = order++;\n\n\t\t\t\t\t//Required to be present for further calculation\n\t\t\t\t\tfinal_item[angularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID] = [];\n\t\t\t\t\tfinal_item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] = 0;\n\t\t\t\t\tfinal_item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_NODES] = 0;\n\t\t\t\t\tfinal_item[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] = 0;\n\t\t\t\t\tfinal_item[angularMultiSelectConstants.INTERNAL_KEY_TREE_VISIBILITY] = angularMultiSelectConstants.INTERNAL_DATA_VISIBILITY_UNDEFINED;\n\t\t\t\t\tfinal_item[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION] = 0;\n\n\t\t\t\t\tfinal_data.push(final_item);\n\n\t\t\t\t\tif (ctx.CHILDREN_PROPERTY in item) {\n\t\t\t\t\t\tprocess_items(item[ctx.CHILDREN_PROPERTY], level + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprocess_items(data, 0);\n\n\t\t\t// Create parents_id values\n\t\t\tvar time = new Date();\n\t\t\tfor (i = 0; i < final_data.length; i++) {\n\t\t\t\titem = final_data[i];\n\n\t\t\t\titem[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION] = time.getTime();\n\t\t\t\tif (item[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] === 0) continue;\n\n\t\t\t\tvar parents = [];\n\t\t\t\tvar last_level = item[angularMultiSelectConstants.INTERNAL_KEY_LEVEL];\n\t\t\t\tfor (j = i; j > 0; j--) {\n\t\t\t\t\tvar possible_parent = final_data[j];\n\n\t\t\t\t\tif (possible_parent[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] >= last_level) continue;\n\n\t\t\t\t\tlast_level = possible_parent[angularMultiSelectConstants.INTERNAL_KEY_LEVEL];\n\t\t\t\t\tparents.push(possible_parent[this.ID_PROPERTY]);\n\n\t\t\t\t\tif (possible_parent[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] === 0) break;\n\t\t\t\t}\n\n\t\t\t\titem[angularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID] = parents.reverse();\n\t\t\t}\n\n\t\t\t// calculate visibility, children and checked properties\n\t\t\tfor (i = 0; i < final_data.length; i++) {\n\t\t\t\titem = final_data[i];\n\n\t\t\t\t// If this is a root element, it should be visible\n\t\t\t\tif (item[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] === 0) item[angularMultiSelectConstants.INTERNAL_KEY_TREE_VISIBILITY] = angularMultiSelectConstants.INTERNAL_DATA_VISIBLE;\n\n\t\t\t\t// we are guaranteed to have a checked property for leafs\n\t\t\t\t// if the current item is a leaf, it won't have children, hence skip\n\t\t\t\tif (typeof(item[this.CHECKED_PROPERTY]) === 'boolean') continue;\n\n\t\t\t\tvar counter_checked = 0;\n\t\t\t\tvar counter_unchecked = 0;\n\t\t\t\tvar counter_null = 0;\n\n\t\t\t\tfor (j = i + 1; j < final_data.length; j++) {\n\t\t\t\t\tvar child = final_data[j];\n\n\t\t\t\t\t// Decide if children should be visible in the tree\n\t\t\t\t\tif (item[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] === child[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] - 1) {\n\t\t\t\t\t\tchild[angularMultiSelectConstants.INTERNAL_KEY_TREE_VISIBILITY] = item[this.OPEN_PROPERTY];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item[angularMultiSelectConstants.INTERNAL_KEY_LEVEL] >= child[angularMultiSelectConstants.INTERNAL_KEY_LEVEL]) break;\n\n\t\t\t\t\t// Logic that decides the checked state of node items\n\t\t\t\t\tif (child[this.CHECKED_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_LEAF_CHECKED) {\n\t\t\t\t\t\tcounter_checked++;\n\t\t\t\t\t\titem[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS]++;\n\t\t\t\t\t} else if (child[this.CHECKED_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_LEAF_UNCHECKED) {\n\t\t\t\t\t\tcounter_unchecked++;\n\t\t\t\t\t\titem[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS]++;\n\t\t\t\t\t} else if (child[this.CHECKED_PROPERTY] === angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECK_UNDEFINED){\n\t\t\t\t\t\tcounter_null++;\n\t\t\t\t\t\titem[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_NODES]++;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// If the number of checked or unchecked elements equals to\n\t\t\t\t// the number of children, then the current item should be\n\t\t\t\t// either 1 or -1 (checked or unchecked). Else, it should be\n\t\t\t\t// marked as 0 (mixed state).\n\t\t\t\tif (item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] === counter_checked) {\n\t\t\t\t\titem[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_CHECKED;\n\t\t\t\t} else if (item[angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS] === counter_unchecked) {\n\t\t\t\t\titem[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_UNCHECKED;\n\t\t\t\t} else {\n\t\t\t\t\titem[this.CHECKED_PROPERTY] = angularMultiSelectConstants.INTERNAL_DATA_NODE_MIXED;\n\t\t\t\t}\n\n\t\t\t\titem[angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN] = counter_checked;\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + ' -> to_internal');\n\n\t\t\treturn final_data;\n\t\t};\n\n\t\t/*\n\t\t████████  ██████      ███████ ██   ██ ████████ ███████ ██████  ███    ██  █████  ██\n\t\t   ██    ██    ██     ██       ██ ██     ██    ██      ██   ██ ████   ██ ██   ██ ██\n\t\t   ██    ██    ██     █████     ███      ██    █████   ██████  ██ ██  ██ ███████ ██\n\t\t   ██    ██    ██     ██       ██ ██     ██    ██      ██   ██ ██  ██ ██ ██   ██ ██\n\t\t   ██     ██████      ███████ ██   ██    ██    ███████ ██   ██ ██   ████ ██   ██ ███████\n\t\t*/\n\t\tDataConverter.prototype.to_external = function (data) {\n\t\t\t/*\n\t\t\t * This is the opposite of what 'to_internal' is supposed to do.\n\t\t\t * This will take an array of objects, usually the output of\n\t\t\t * get_*_tree and delete all the metadata of the engine, leaving\n\t\t\t * only the data that the user cares about.\n\t\t\t */\n\t\t\tif (!Array.isArray(data) || data.length === 0) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + ' -> to_external');\n\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t//AMS engine metadata\n\t\t\t\tdelete data[i][angularMultiSelectConstants.INTERNAL_KEY_LEVEL];\n\t\t\t\tdelete data[i][angularMultiSelectConstants.INTERNAL_KEY_ORDER];\n\t\t\t\tdelete data[i][angularMultiSelectConstants.INTERNAL_KEY_PARENTS_ID];\n\t\t\t\tdelete data[i][angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_LEAFS];\n\t\t\t\tdelete data[i][angularMultiSelectConstants.INTERNAL_KEY_CHILDREN_NODES];\n\t\t\t\tdelete data[i][angularMultiSelectConstants.INTERNAL_KEY_CHECKED_CHILDREN];\n\t\t\t\tdelete data[i][angularMultiSelectConstants.INTERNAL_KEY_TREE_VISIBILITY];\n\t\t\t\tdelete data[i][angularMultiSelectConstants.INTERNAL_KEY_CHECKED_MODIFICATION];\n\n\t\t\t\t//TODO: Remove after https://github.com/techfort/LokiJS/issues/346\n\t\t\t\tdelete data[i].meta;\n\t\t\t\tdelete data[i].$loki;\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + ' -> to_external');\n\n\t\t\treturn data;\n\t\t};\n\n\t\t/*\n\t\t████████  ██████       █████  ██████  ██████   █████  ██    ██      ██████  ███████      ██████  ██████       ██ ███████  ██████ ████████ ███████\n\t\t   ██    ██    ██     ██   ██ ██   ██ ██   ██ ██   ██  ██  ██      ██    ██ ██          ██    ██ ██   ██      ██ ██      ██         ██    ██\n\t\t   ██    ██    ██     ███████ ██████  ██████  ███████   ████       ██    ██ █████       ██    ██ ██████       ██ █████   ██         ██    ███████\n\t\t   ██    ██    ██     ██   ██ ██   ██ ██   ██ ██   ██    ██        ██    ██ ██          ██    ██ ██   ██ ██   ██ ██      ██         ██         ██\n\t\t   ██     ██████      ██   ██ ██   ██ ██   ██ ██   ██    ██         ██████  ██           ██████  ██████   █████  ███████  ██████    ██    ███████\n\t\t*/\n\t\tDataConverter.prototype.to_array_of_objects = function (data, keys) {\n\t\t\t/*\n\t\t\t * Takes an array of objects (the result of get_checked_tree usually)\n\t\t\t * and returns it as is if the \"keys\" argument hasn't been passed or\n\t\t\t * an array of objects, each object containing only the keys in the\n\t\t\t * \"key\" argument.\n\t\t\t */\n\t\t\tif (!Array.isArray(data) || data.length === 0) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + ' -> to_array_of_objects');\n\n\t\t\tif (keys === undefined) {\n\t\t\t\tkeys = [];\n\t\t\t}\n\n\t\t\tvar new_data = [];\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tvar new_obj = {};\n\t\t\t\tvar obj = data[i];\n\n\t\t\t\tif (typeof(obj) !== 'object' || Array.isArray(obj)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (keys.length === 0) {\n\t\t\t\t\tnew_data.push(obj);\n\t\t\t\t} else {\n\t\t\t\t\tfor (var j = 0; j < keys.length; j++) {\n\t\t\t\t\t\tif (!(keys[j] in obj)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnew_obj[keys[j]] = obj[keys[j]];\n\t\t\t\t\t}\n\t\t\t\t\tnew_data.push(new_obj);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + ' -> to_array_of_objects');\n\n\t\t\treturn new_data;\n\t\t};\n\n\t\t/*\n\t\t████████  ██████       █████  ██████  ██████   █████  ██    ██      ██████  ███████      █████  ██████  ██████   █████  ██    ██ ███████\n\t\t   ██    ██    ██     ██   ██ ██   ██ ██   ██ ██   ██  ██  ██      ██    ██ ██          ██   ██ ██   ██ ██   ██ ██   ██  ██  ██  ██\n\t\t   ██    ██    ██     ███████ ██████  ██████  ███████   ████       ██    ██ █████       ███████ ██████  ██████  ███████   ████   ███████\n\t\t   ██    ██    ██     ██   ██ ██   ██ ██   ██ ██   ██    ██        ██    ██ ██          ██   ██ ██   ██ ██   ██ ██   ██    ██         ██\n\t\t   ██     ██████      ██   ██ ██   ██ ██   ██ ██   ██    ██         ██████  ██          ██   ██ ██   ██ ██   ██ ██   ██    ██    ███████\n\t\t*/\n\t\tDataConverter.prototype.to_array_of_arrays = function (data, keys) {\n\t\t\t/*\n\t\t\t * Takes an array of objects (the result of get_checked_tree usually)\n\t\t\t * and returns an array of arrays. Each array inside the returned\n\t\t\t * array contains the values of the keys that result of the\n\t\t\t * intersection of the object's keys and the argument \"keys\". The\n\t\t\t * array will contain the values in the order they have in the \"key\"\n\t\t\t * argument.\n\t\t\t */\n\t\t\tif (!Array.isArray(data) || data.length === 0) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + ' -> to_array_of_arrays');\n\n\t\t\tif (keys === undefined) {\n\t\t\t\tkeys = [];\n\t\t\t}\n\n\t\t\tfunction vals (obj) {\n\t\t\t\treturn Object.keys(obj).map(function (key) {\n\t\t\t\t\treturn obj[key];\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar new_data = [];\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tvar new_arr = [];\n\t\t\t\tvar obj = data[i];\n\n\t\t\t\tif (typeof(obj) !== 'object' || Array.isArray(obj)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (keys.length === 0) {\n\t\t\t\t\tnew_data.push(vals(obj));\n\t\t\t\t} else {\n\t\t\t\t\tfor (var j = 0; j < keys.length; j++) {\n\t\t\t\t\t\tif (!(keys[j] in obj)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnew_arr.push(obj[keys[j]]);\n\t\t\t\t\t}\n\t\t\t\t\tnew_data.push(new_arr);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + ' -> to_array_of_arrays');\n\n\t\t\treturn new_data;\n\t\t};\n\n\t\t/*\n\t\t████████  ██████       █████  ██████  ██████   █████  ██    ██\n\t\t   ██    ██    ██     ██   ██ ██   ██ ██   ██ ██   ██  ██  ██\n\t\t   ██    ██    ██     ███████ ██████  ██████  ███████   ████\n\t\t   ██    ██    ██     ██   ██ ██   ██ ██   ██ ██   ██    ██\n\t\t   ██     ██████      ██   ██ ██   ██ ██   ██ ██   ██    ██\n\t\t*/\n\t\tDataConverter.prototype.to_array = function (data, keys) {\n\t\t\t/*\n\t\t\t * Takes an array of objects (the result of get_checked_tree usually)\n\t\t\t * and returns a single array filled with the values of all the\n\t\t\t * objects's keys that are contained in the \"keys\" argument.\n\t\t\t * This usually doesn't make much sense when more than 1 item in the\n\t\t\t * tree is selected, but you're free to use it however you like.\n\t\t\t */\n\t\t\tif (!Array.isArray(data) || data.length === 0) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + ' -> to_array');\n\n\t\t\tif (keys === undefined) {\n\t\t\t\tkeys = [];\n\t\t\t}\n\n\t\t\tfunction vals (obj) {\n\t\t\t\treturn Object.keys(obj).map(function (key) {\n\t\t\t\t\treturn obj[key];\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tvar j;\n\t\t\tvar obj = data[0];\n\t\t\tvar ret = [];\n\n\t\t\tif (typeof(obj) !== 'object' || Array.isArray(obj)) {\n\t\t\t\t//do nothing\n\t\t\t} else {\n\t\t\t\tif (keys.length === 0) {\n\t\t\t\t\tvar obj_vals = vals(obj);\n\t\t\t\t\tfor (j = 0; j < obj_vals.length; j++) {\n\t\t\t\t\t\tret.push(obj_vals[j]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (j = 0; j < keys.length; j++) {\n\t\t\t\t\t\tif (!(keys[j] in obj)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tret.push(obj[keys[j]]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + ' -> to_array');\n\n\t\t\treturn ret;\n\t\t};\n\n\t\t/*\n\t\t████████  ██████       ██████  ██████       ██ ███████  ██████ ████████\n\t\t   ██    ██    ██     ██    ██ ██   ██      ██ ██      ██         ██\n\t\t   ██    ██    ██     ██    ██ ██████       ██ █████   ██         ██\n\t\t   ██    ██    ██     ██    ██ ██   ██ ██   ██ ██      ██         ██\n\t\t   ██     ██████       ██████  ██████   █████  ███████  ██████    ██\n\t\t*/\n\t\tDataConverter.prototype.to_object = function (data, keys) {\n\t\t\t/*\n\t\t\t * Takes an array of objects (the result of get_checked_tree usually)\n\t\t\t * and returns the first object.\n\t\t\t * If the \"keys\" argument is passed, only the keys of the object that\n\t\t\t * match the values in the \"keys\" argument will be returned.\n\t\t\t * This usually doesn't make much sense when more than 1 item in the tree\n\t\t\t * is selected, but you're free to use it however you like.\n\t\t\t */\n\n\t\t\tif (!Array.isArray(data) || data.length === 0) {\n\t\t\t\treturn {};\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + ' -> to_object');\n\n\t\t\tif (keys === undefined) {\n\t\t\t\tkeys = [];\n\t\t\t}\n\n\t\t\tvar ret;\n\t\t\tvar obj = data[0];\n\n\t\t\tif (typeof(obj) !== 'object' || Array.isArray(obj)) {\n\t\t\t\tret = {};\n\t\t\t} else {\n\t\t\t\tif (keys.length === 0) {\n\t\t\t\t\tret = obj;\n\t\t\t\t} else {\n\t\t\t\t\tvar new_obj = {};\n\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\t\t\tif (!(keys[i] in obj)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnew_obj[keys[i]] = obj[keys[i]];\n\t\t\t\t\t}\n\t\t\t\t\tret = new_obj;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + ' -> to_object');\n\n\t\t\treturn ret;\n\t\t};\n\n\t\t/*\n\t\t████████  ██████      ██    ██  █████  ██      ██    ██ ███████\n\t\t   ██    ██    ██     ██    ██ ██   ██ ██      ██    ██ ██\n\t\t   ██    ██    ██     ██    ██ ███████ ██      ██    ██ █████\n\t\t   ██    ██    ██      ██  ██  ██   ██ ██      ██    ██ ██\n\t\t   ██     ██████        ████   ██   ██ ███████  ██████  ███████\n\t\t*/\n\t\tDataConverter.prototype.to_value = function (data, key) {\n\t\t\t/*\n\t\t\t * Takes an array of one object (the result of get_checked_tree usually)\n\t\t\t * and returns the value of the key in the object that is passed as the\n\t\t\t * \"key\" argument.\n\t\t\t * If \"key\" hasn't been passed, the first available value in the object\n\t\t\t * will be returned.\n\t\t\t */\n\t\t\t if (!Array.isArray(data) || data.length === 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.time(this.NAME + ' -> to_value');\n\n\t\t\tvar ret;\n\t\t\tvar obj = data[0];\n\n\t\t\tif (typeof(obj) !== 'object' || Array.isArray(obj)) {\n\t\t\t\tret = undefined;\n\t\t\t} else {\n\t\t\t\tif (key === undefined) {\n\t\t\t\t\tvar keys = Object.keys(obj);\n\t\t\t\t\tif (keys.length === 0) {\n\t\t\t\t\t\tret = undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkey = keys[0];\n\t\t\t\t\t\tret = key in obj ? obj[key] : undefined;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tkey = Array.isArray(key) ? key[0] : key;\n\t\t\t\t\tret = key in obj ? obj[key] : undefined;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.DEBUG === true) console.timeEnd(this.NAME + ' -> to_value');\n\n\t\t\treturn ret;\n\t\t};\n\n\t\treturn DataConverter;\n\t}\n]);\n"]}